NAME
    Net::SSH::Mechanize - asynchronous ssh command invocation

VERSION
    This document describes Net::SSH::Mechanize version 0.1

SYNOPSIS
    Somewhat like POE::Component::OpenSSH, SSH::Batch,
    Net::OpenSSH::Parallel etc, but:

    *   It uses the asynchonous "AnyEvent" event framework.

    *   It aims to support sudoing smoothly.

    Synchronous usage:

        use Net::SSH::Mechanize;

        # Create an instance. This will not log in yet.
        # All but the host name below are optional.
        # Your .ssh/config will be used as normal, so if you 
        # define ssh settings for a host there they will be picked up.
        my $ssh = Net::SSH::Mechanize->new(
            host => 'somewhere.com',
            user => 'jbloggs',
            password => 'secret',
            port => 22,
        );

        # Accessing ->capture calls ->login automatically.
        my $output = $ssh->capture("id");

        # If successful, $output now contains something like:
        # uid=1000(jbloggs) gid=1000(jbloggs) groups=1000(jbloggs)

        $output = $ssh->sudo_capture("id");

        # If successful, $output now contains something like:
        # uid=0(root) gid=0(root) groups=0(root)

        $ssh->logout;

    See below for further examples, and script/gofer in the distribution
    source for a working, hopefully usable example.

    This is work in progress. Feedback appreciated.

DESCRIPTION
    The point about using "AnyEvent" internally is that "blocking" method
    calls only block the current "thread", and so the above can be used in
    parallel with (for example) other ssh sessions in the same process
    (using "AnyEvent", or "Coro"). Although a sub-process is spawned for
    each ssh command, the parent process manages the child processes
    asynchronously, without blocking or polling.

    Here is an example of asynchronous usage, using the
    "<AnyEvent-"condvar>> API. Calls return an "<AnyEvent::CondVar">
    instance, which you can call the usual "->recv" and "->cb" methods on to
    perform a blocking wait (within the current thread), or assign a
    callback to be called on completion (respectively). See AnyEvent.

    This is effectively what the example in the synopsis is doing, behind
    the scenes.

        use Net::SSH::Mechanize;

        # Create an instance, as above.
        my $ssh = Net::SSH::Mechanize->new(
            host => 'somewhere.com',
            user => 'jbloggs',
            password => 'secret',
            port => 22,
        );

        # Accessing ->capture calls ->login automatically.
        my $condvar = AnyEvent->condvar;
        $ssh->login_async->cb(sub {
            my ($session) = shift->recv;
            $session->capture_async("id")->cb(sub {
                my ($stderr_handle, $result) = shift->recv;

                $condvar->send($result);
            });
        });

        # ... this returns immediately.  The callbacks assigned will get
        # invoked behind the scenes, and we just need to wait and collect
        # the result handed to our $condvar.

        my $result = $convar->recv;

        # If successful, $output now contains something like:
        # uid=1000(jbloggs) gid=1000(jbloggs) groups=1000(jbloggs)

        $ssh->logout;

    You would only need to use this asynchronous style if you wanted to
    interface with AnyEvent, and/or add some "Expect"-like interaction into
    the code.

    However, see also Net::SSH::Mechanize::Multi for a more convenient way
    of running multiple ssh sessions in parallel. It uses Coro to provide a
    (cooperatively) threaded model.

AUTHOR
    Nick Stokoe "<npw@cpan.org>"

LICENCE AND COPYRIGHT
    Copyright (c) 2011, Nick Stokoe "<npw@cpan.org>". All rights reserved.

    This module is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself. See perlartistic.

DISCLAIMER OF WARRANTY
    BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
    FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
    OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
    PROVIDE THE SOFTWARE "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
    EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
    ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH
    YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
    NECESSARY SERVICING, REPAIR, OR CORRECTION.

    IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
    WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
    REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE LIABLE
    TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL, OR
    CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
    SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
    RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
    FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
    SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
    DAMAGES.

